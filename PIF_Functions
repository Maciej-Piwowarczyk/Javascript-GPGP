// This code is used within a Google Sheet that tracks inventory and allows for checking in/out, updating, and searching for inventory within a database.

//global variables
sh = SpreadsheetApp.getActiveSpreadsheet();
shForm = sh.getSheetByName ("Form");
shData = sh.getSheetByName ("Database");

dictData = {
"ID"  : "A",
"SBT" : "B",
"NAM" : "C",
"DES" : "D",
"TCD" : "E",
"QNT" : "F",
"VAL" : "G",
"STS" : "H",
}

dictForm = {
"ID"  : "D4",
"TYP" : "D5",
"SBT" : "D6",
"NAM" : "D7",
"DES" : "D8",
"TCD" : "D9",
"QNT" : "D10",
"VAL" : "D11",
"STS" : "D12",
"USR" : "D13",
}

dictMessages = {
"ID"  : "G4",
"TYP" : "G5",
"DES" : "G8",
"QNT" : "G10",
"VAL" : "G11",
"USR" : "G13",
}

/////////////////////////////////////
// Helper functions
function row2col(row) {
  return row[0].map(function(elem) {return [elem];});
}

function getAllIndices(listIDs,listCkdIn,chkVal,val) {
    var indices = [], i;
    for(i = 0; i < listIDs.length; i++)
        if (listIDs[i] === val)
            if (listCkdIn[i] === chkVal)
                indices.push(i+1);
    return indices;
}

/////////////////////////////////////
// Cleaning functions for resetting the form and messages
function clearForm() {
  // Clears inputs from input boxes
  shForm.getRange("D4:D13").clearContent()
}

function clearMess() {
  // Clears Warning Message box
  shForm.getRange("G4:G13").clearContent()
}

function clear() {
  clearForm()
  clearMess()
}

/////////////////////////////////////
// Adding, Updating, and Searching for a product
function addNewProduct() {
  clearMess()

  // Info logging
  shLog = sh.getSheetByName("Activity Log");
  const now = new Date();

  // Grab all information from the form
  rng_val = shForm.getRange("D4:D13").getValues();

  // Check if required values are in the correct format
  errors = 0
  if (rng_val[1][0] == "") {
    shForm.getRange(dictMessages["TYP"]).setValue("You need to set a Product Type!")
    errors = 1
  } 
  if (typeof rng_val[6][0] != "number") {
    shForm.getRange(dictMessages["QNT"]).setValue("The product's quantity must be a number!")
    errors = 1
  }
  if (typeof rng_val[7][0] != "number") {
    shForm.getRange(dictMessages["VAL"]).setValue("The product's value must be a number!")
    errors = 1
  }

  // If there are no errors: save the product, clear the form, and inform the user
  if (errors == 0) {
    clearMess()
    last_row = shData.getLastRow();
    shData.appendRow([
      rng_val[1][0] + "-" + last_row, 
      rng_val[2][0],
      rng_val[3][0],
      rng_val[4][0],
      rng_val[5][0],
      rng_val[6][0],
      rng_val[7][0]
      ]);
    clearForm()
    shForm.getRange(dictMessages["DES"]).setValue("Product " + rng_val[1][0] + "-" + last_row + " has been successfully added to the database.")
    shLog.appendRow([now,rng_val[1][0] + "-" + last_row,"New item added."])
  } else {
    shLog.appendRow([now,rng_val[1][0] + "-" + last_row,"New item failed to be added."])
  }
}

function search(){
  clearMess()

  // Check if there's a product to search for
  searchID = shForm.getRange(dictForm["ID"]).getValue().trim();
  if (searchID == "") {
    shForm.getRange(dictMessages["ID"]).setValue("You must search using the item's ID.")
    return;
  }
  
  // Check if the search ID is in the database. If yes, grab its index (+1 for indexing shenanigans)
  shDataIDs = shData.getRange(dictData["ID"] + ":" + dictData["ID"]).getValues().flat();
  if (shDataIDs.includes(searchID) && searchID != "") {
    searchIDindex = shDataIDs.indexOf(searchID) + 1
  } else {
    shForm.getRange(dictMessages["ID"]).setValue("This ID is not in the database.")
    return;
  }
    
  // Grab everything except for the ID, make it into a column, then put it into the form
  searchIDdata = shData.getRange("B"+searchIDindex.toString()+":H"+searchIDindex.toString()).getValues()
  searchIDdata = row2col(searchIDdata)
  // Add the type to the front of the array
  searchIDdata.unshift([searchID.substring(0,3).toString()])
  shForm.getRange("D5:D12").setValues(searchIDdata)
}  

function updateProduct(){
  clearMess()

  // Info logging
  shLog = sh.getSheetByName("Activity Log");
  const now = new Date();

  // Check if the search ID is in the database. If yes, grab its index (+1 for indexing shenanigans) and get to work
  searchID = shForm.getRange(dictForm["ID"]).getValue().trim();
  shDataIDs = shData.getRange(dictData["ID"] + ":" + dictData["ID"]).getValues().flat();
  if (shDataIDs.includes(searchID) && searchID != "") {
    searchIDindex = shDataIDs.indexOf(searchID) + 1

    // Grabbing both the input and current data
    inputInfo = shForm.getRange("D6:D12").getValues().flat()
    curreInfo = shData.getRange("B"+searchIDindex.toString()+":"+"H"+searchIDindex.toString()).getValues()

    // Create a new array that will be the values in the form unless the value is empty, in which case we grab from the current info
    updatInfo = [[]]
    for (i = 0; i < 7; i++) {
      if (inputInfo[i] == "") {
        updatInfo[0].push(curreInfo[0][i])
      } else {
        updatInfo[0].push(inputInfo[i])
      }      
    }

    // Update the database, then update the form with all the new info
    shData.getRange("B"+searchIDindex.toString()+":"+"H"+searchIDindex.toString()).setValues(updatInfo)
    updatInfo = row2col(updatInfo)
    shForm.getRange("D6:D12").setValues(updatInfo)

    // Check if changing the type, make sure the new ID is unique
    typeCheck = shForm.getRange(dictForm["TYP"]).getValue()
    if (typeCheck == searchID.substring(0,3).toString()) {
      shForm.getRange(dictMessages["DES"]).setValue("The item " + searchID + " has been successfully updated with the values in the form.")
      shLog.appendRow([now,searchID,"Item has been updated."])
    } else {
      // Create the new ID and check if it already exists   
      newID = typeCheck + '-' + searchID.split('-')[1]
      if (shDataIDs.includes(newID)) {
        // Try to just use the last row
        newID = newID.split('-')[0] + '-' + shData.getLastRow().toString()
        if (shDataIDs.includes(newID)) {
          // If that does not work, we keep adding to the number until we find a unique ID
          uniqueID = false
          i = shData.getLastRow()
          while (!uniqueID) {
            i += 1
            newID = newID.split('-')[0] + '-' + i.toString()
            if (!shDataIDs.includes(newID)) {
              uniqueID = true
            }
          }
        } 
      }
      // Once we have found the unique new ID, we can update the form, database, and info to the user
      shData.getRange(dictData["ID"]+searchIDindex.toString()).setValue(newID)
      shForm.getRange(dictForm["ID"]).setValue(newID)
      shForm.getRange(dictMessages["DES"]).setValue("The item " + searchID + " has been converted to " + newID + " and updated with the values in the form.")
      shLog.appendRow([now,newID,searchID + " has been updated to " + newID])
    }
  } else {
    shForm.getRange(dictMessages["ID"]).setValue("This item ID is not in the database.")
    shLog.appendRow([now,searchID,"Failed to update item due to bad ID."])
  }
}

/////////////////////////////////////
// Checking a product in or out
function checkoutProduct() {
  clearMess()

  // Info logging
  shLog = sh.getSheetByName("Activity Log");
  const now = new Date();

  searchID = shForm.getRange(dictForm["ID"]).getValue().trim();

  // Check if the product is part of a protected class
  const disallowedTypes = ["TEC"];
  if (disallowedTypes.includes(searchID.substring(0,3))) {
    shForm.getRange(dictMessages["TYP"]).setValue("The item you are attempting to check out is part of a protected type and is not eligible for check-out.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked out due to protected type."])
    return;
  }

  // Check if the product is indeed in the database
  shDataIDs = shData.getRange(dictData["ID"] + ":" + dictData["ID"]).getValues().flat();
  if (shDataIDs.includes(searchID) && searchID != "") {
    searchIDindex = shDataIDs.indexOf(searchID) + 1
  } else {
    shForm.getRange(dictMessages["ID"]).setValue("This ID is not in the database.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked out due to bad ID."])
    return;
  }

  // Check if a user has been selected for check-out
  user = shForm.getRange(dictForm["USR"]).getValue();
  if (user == "") {
    shForm.getRange(dictMessages["USR"]).setValue("Must select a user for check-out.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked out due to missing user."])
    return;
  }

  quant = shForm.getRange(dictForm["QNT"]).getValue()
  searchIDquantity = shData.getRange(dictData["QNT"]+searchIDindex.toString()).getValues();
  if (quant > searchIDquantity) {
    shForm.getRange(dictMessages["DES"]).setValue("You are attempting to check-out more of this product than is currently in the database.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked out due to limited quantity."])
    return;
  }

  // Check-out the product, noting date/time, user, and quantity
  shLog.appendRow([now,searchID,searchIDquantity[0][0].toString() + " of item checked out by " + user])
  shData.getRange(dictData["STS"] + searchIDindex).setValue("Last checked out by " + user)
  shForm.getRange(dictMessages["DES"]).setValue(searchIDquantity[0][0].toString() + " of " + searchID + " checked out successfully to " + user + ".")

  clearForm()
}

function checkinProduct() {
  clearMess()

  // Info logging
  shLog = sh.getSheetByName("Activity Log");
  const now = new Date();

  // Check if the search ID is in the database
  searchID = shForm.getRange(dictForm["ID"]).getValue().trim();
  shDataIDs = shData.getRange(dictData["ID"] + ":" + dictData["ID"]).getValues().flat();
  if (!shDataIDs.includes(searchID) || searchID == "") {
    shForm.getRange(dictMessages["DES"]).setValue("The product you are trying to check in does not appear in the database.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked in due to bad ID."])
    return;
  }

  quant = shForm.getRange(dictForm["QNT"]).getValue()
  if (typeof quant != "number") {
    shForm.getRange(dictMessages["QNT"]).setValue("You must indicate how many of this item you are checking in.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked out due to bad quantity."])
    return;
  }

  user = shForm.getRange(dictForm["USR"]).getValue()
  if (user == "") {
    shForm.getRange(dictMessages["USR"]).setValue("Must select a user for check-in.")
    shLog.appendRow([now,searchID,"Item unsuccessfully checked in due to missing user."])
    return;
  }

  // Grab some columns and check if the item is currently checked out
  // shCout = sh.getSheetByName("Check Out");
  // shCoutCkdIn = shCout.getRange("B:B").getValues().flat()
  // shCoutIDs = shCout.getRange("C:C").getValues().flat()
  // searchIDindices = getAllIndices(shCoutIDs, shCoutCkdIn,"", searchID)
  // if (searchIDindices.length == 0) {
  //   shForm.getRange(mes_DES).setValue("The product you are trying to check in is not currently checked out.")
  //   return;
  // }

  // Of the items checked out, check if it is checked out by the user trying to check it back in
  // shCoutUsers = shCout.getRange("E:E").getValues().flat()
  // user = shForm.getRange("D13").getValue()
  // tempIndices = []
  // for (i = 0; i < searchIDindices.length; i++) {
  //   if (shCoutUsers[searchIDindices[i]-1] === user) {
  //     tempIndices.push(searchIDindices[i])
  //   }
  // }

  // searchIDindices = tempIndices
  // if (searchIDindices.length == 0) {
  //   shForm.getRange(mes_DES).setValue("The product you are trying to check in is not currently checked out by " + user + ".")
  //   return;
  // }

  // Check in the item and inform the user
  shForm.getRange(dictMessages["DES"]).setValue(quant.toString() + "of item has been checked in by " + user + " at " + now.toString() + ".")
  shLog.appendRow([now,searchID,quant.toString() + " of item checked in by " + user])

  clearForm()
}
